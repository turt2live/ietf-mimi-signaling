



More Instant Messaging Interoperability                       T. Ralston
Internet-Draft                                                M. Hodgson
Intended status: Informational          The Matrix.org Foundation C.I.C.
Expires: 4 March 2024                                   1 September 2023


                        MIMI Signaling Protocol
                  draft-ralston-mimi-signaling-latest

Abstract

   The MIMI signaling protocol is responsible for user-level
   interactions in the overall MIMI protocol stack.  It implements a
   _membership control protocol_ and methods for a _policy control
   protocol_ to operate, as described by [I-D.barnes-mimi-arch].

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://turt2live.github.io/ietf-mimi-signaling/draft-ralston-mimi-
   signaling.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-ralston-mimi-signaling/.

   Discussion of this document takes place on the More Instant Messaging
   Interoperability Working Group mailing list (mailto:mimi@ietf.org),
   which is archived at https://mailarchive.ietf.org/arch/browse/mimi/.
   Subscribe at https://www.ietf.org/mailman/listinfo/mimi/.

   Source for this draft and an issue tracker can be found at
   https://github.com/turt2live/ietf-mimi-signaling.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 4 March 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Room Structure
   4.  Events
     4.1.  Reference Hash
     4.2.  Content Hash
     4.3.  Redaction
     4.4.  State Events
     4.5.  m.room.create
     4.6.  m.room.member
   5.  History Model
   6.  TODO(TR): Sections
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The More Instant Messaging Interoperability (MIMI) working group is
   responsible for specifying a protocol to achieve interoperability
   among modern messaging providers.  Most providers do not currently
   support Messaging Layer Security (MLS) [RFC9420], a chartered
   requirement of MIMI, but do support other forms of encryption
   alongside their existing signaling.

   Within the MIMI stack of protocols, signaling is responsible for
   coordinating user-level actions and membership.  This document
   describes such a protocol, encompassing a membership control protocol
   and a framework for a policy control protocol.

   An overview of the architecture, including the control protocols
   mentioned, is described by [I-D.barnes-mimi-arch].  A proposed policy
   control protocol running over this signaling protocol is described by
   *TODO(TR): Policy draft*.

   MIMI has a chartered requirement to use MLS in the encryption/
   security protocol, however most existing messaging providers do not
   currently use MLS in their encryption.  This document describes an
   approach for enabling a given encryption/security protocol without
   concerning itself with the specifics of such a protocol.  This allows
   existing messaging providers to insert their own encryption/security
   protocols external to the MIMI working group.

   As described by [I-D.barnes-mimi-arch], events are sent in rooms to
   accomplish state changes and messaging.  This document defines how
   events become "accepted" into the room by enforcing policy, and how
   state events can configure the policy envelope for future
   enforcement.

   This document describes an extensible approach to room policy,
   similar to how different encryption/security layers can be used
   within a room.  The policy cannot change once set, though it can be
   configured using state events.  This document describes some baseline
   policy aspects, but otherwise defers the majority of policy to other
   documents.

   A create state event is used to set the policy and encryption/
   security protocol.  This create event is the very first event in the
   room - all other events are linearly placed after it.

   Abstract concepts are used for transport and persistence of rooms/
   events.  For example, events can be persisted within an MLS group or
   serialized in a different format than described in this document.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Terms from [I-D.barnes-mimi-arch] and [I-D.ralston-mimi-terminology]
   are used throughout this document.  [I-D.barnes-mimi-arch] takes
   precedence where there's conflict.

   Other terms include:

   _Unpadded Base64_: Serialization as described by Section 4 of
   [RFC4648] with padding (= characters) removed.

   _URL-Safe Base64_: As described by Section 5 of [RFC4648].  May also
   be unpadded, as above.

   _Redaction_: An algorithm to remove fields irrelevant to the
   signaling protocol's operation.  This should not be confused with
   message deletion/removal, where a user wishes to delete content they
   previously sent in the room.  Redaction is reserved for protocol
   operation exclusively.  See Section 4.3.

   _Content Hash_: A SHA256 [RFC6234] hash covering the unredacted
   event.  See Section 4.2.

   _Reference Hash_: A SHA256 [RFC6234] hash covering the essential
   fields of an event, including the content hash.  See Section 4.1.

3.  Room Structure

   Rooms consist of an identifier and linear linked-list of events.  The
   first event MUST be a create event (Section 4.5) to establish the
   policy and encryption/security protocol the room uses.  The second
   event MUST be the user membership event (Section 4.6) for the
   creator.  All other events follow, and are sequenced into the linked-
   list by the hub server.

   The linked-list represents the set of accepted events in the room.
   Rejected or illegal events are excluded.  The hub server MUST enforce
   the room's policy upon the room.  Follower servers SHOULD
   additionally enforce the policy, preventing the hub from accepting
   illegal events.

   Events point to their parent event, as sequenced by the hub, and the
   policy-configuring state events which prove the event is allowed in
   the room (the event's "auth events").  The create event MUST be
   included in the auth events, unless the event is the create event
   itself.  Other examples of auth events include the sender's
   membership event and current permissions event.

   This structure allows a server to discard events it no longer needs,
   but can easily be found later.  For example, a follower server might
   only persist the create event and a dozen most recent events.  If the
   server then has a need to "backfill" then it can simply use the
   prevEvent pointer off the oldest (non-create) event it has until
   eventually hitting the intended mark or create event.

   In diagram form, a room looks as such:

   +---------------+   +---------------+   +------------------+
   | m.room.create |<--| m.room.member |<--| m.room.encrypted |
   +---------------+   +---------------+   +------------------+
          ^                    ^                     |
          +--------------------+---------------------+

                    Figure 1: A room made up of events.

   The m.room.encrypted event (not specified in this document) has the
   m.room.member event as its only previous event, but points at both
   the m.room.member and m.room.create events as auth events.  In
   practice, a room would likely have more m.room.member events to
   represent other users in the room, rather than this example user
   conversing with themselves.

   *TODO(TR): Should we replace room IDs with the create event's ID?*

4.  Events

   The concept of events is described by Section 5.1 of
   [I-D.barnes-mimi-arch].  An event is authenticated against its TLS
   presentation language format (Section 3 of [RFC8446]):

// Consists of a server's signatures using their signing key. The transport
// specification defines which specific signing key algorithm is used. This
// document describes *what* a signature covers.
opaque Signatures;
struct {
  opaque roomId;               // where the event is sent to
  opaque type;                 // the type of event. Defines format for content
  opaque [[stateKey]];         // if present, the event is a state event
  opaque sender;               // who or what sent this event
  opaque content;              // binary event content (TODO(TR): type??)
  opaque authEvents[];         // the event IDs of the auth events
  opaque prevEvent;            // the parent event ID
  uint8 originContentHash[32]; // the origin server's content hash of the event
  Signatures hubSignature;
  Signatures originSignature;
} Event;

   *TODO(TR): Should we bring over origin_server_ts?*

   *TODO(TR): Maximum lengths? (or is this a transport problem?)*

   Note that an "event ID" is not specified on the object.  The event ID
   for an event is the sigil $ followed by the URL-Safe Unpadded
   Base64-encoded reference hash (Section 4.1) of the event.

   The "origin server" of an event is the server denoted/implied by the
   sender.

4.1.  Reference Hash

   Events are referenced by ID in relation to each other, forming the
   room history and auth chain.  If the event ID was a sender-generated
   value, any server along the send or receive path could "replace" that
   event with another perfectly legal event, both using the same ID.

   By using a calculated value, namely the reference hash, if a server
   does try to replace the event then it would result in a completely
   different event ID.  That event ID becomes impossible to reference as
   it wouldn't be part of the proper room history.

   *TODO(TR): There might be a bug in here.  Even with a reference hash,
   the malicious event is only made illegal upon discovery of a later
   event.  This means we end up having to evict an event or two, which
   breaks append-only semantics.*

   To calculate a reference hash, the event is first redacted
   (Section 4.3) alongside hubSignature and originSignature fields being
   removed.  The resulting binary is then hashed using SHA256 [RFC6234].

   To further create an event ID, the resulting hash is encoded using
   URL-Safe Unpadded Base64 and prefixed with the $ sigil.

4.2.  Content Hash

   An event's content hash prevents servers from modifying details of
   the event not covered by the reference hash itself.  For example, a
   room name state event doesn't have the name itself covered by a
   reference hash because it's redacted, so it's instead covered by the
   content hash, which is in turn covered by the reference hash.  This
   allows the event to later be redacted without affecting the event ID
   of that event.

   To calculate a content hash, the following fields are removed from
   the event first:

   *  originContentHash

   *  hubSignature

   *  originSignature

   *  prevEvent

   *  authEvents

   authEvents and prevEvent are removed because they are populated by
   the hub server.  The content hash is to preserve the origin server's
   event, not the hub server's.

   The resulting binary is then hashed using SHA256 [RFC6234].

4.3.  Redaction

   The process of removing fields from an event which aren't important
   for the overall protocol to operate is known as "redaction".  This
   document protects fields of events required for signaling to work
   while a policy document or encryption/security protocol will define
   their own fields.  For example, the MLS ciphertext for a proposal or
   commit might be preserved through redaction to avoid breaking the MLS
   group for future participants.

   The default behaviour for any event type is to remove all fields
   _not_ specified by Section 4 plus content.  Individual event types
   MAY specify their own redaction behaviour for content.

4.4.  State Events

   *TODO*: This.  What are they?

4.5.  m.room.create

   *TODO*: This.

4.6.  m.room.member

   *TODO*: This.

5.  History Model

   *TODO*: This.  Short version is servers only need the auth chain for
   all current members of the room upon joining (we can discard people
   who joined and already left, and old message events).  Someone needs
   to keep a copy of each event somewhere though, otherwise the room
   breaks.

6.  TODO(TR): Sections

   *  Join, leave, etc operations overview.

   *  [User ->] Follower -> Hub send path.

   *  Actual examples of an event?

7.  Security Considerations

   *TODO*: This

8.  IANA Considerations

   This document has no IANA actions.

9.  References

9.1.  Normative References

   [I-D.barnes-mimi-arch]
              Barnes, R., "An Architecture for More Instant Messaging
              Interoperability (MIMI)", Work in Progress, Internet-
              Draft, draft-barnes-mimi-arch-00, 29 August 2023,
              <https://datatracker.ietf.org/doc/html/draft-barnes-mimi-
              arch-00>.

   [I-D.ralston-mimi-terminology]
              Ralston, T., "MIMI Terminology", Work in Progress,
              Internet-Draft, draft-ralston-mimi-terminology-02, 10 July
              2023, <https://datatracker.ietf.org/doc/html/draft-
              ralston-mimi-terminology-02>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/rfc/rfc4648>.

   [RFC6234]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and SHA-based HMAC and HKDF)", RFC 6234,
              DOI 10.17487/RFC6234, May 2011,
              <https://www.rfc-editor.org/rfc/rfc6234>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

9.2.  Informative References

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [RFC9420]  Barnes, R., Beurdouche, B., Robert, R., Millican, J.,
              Omara, E., and K. Cohn-Gordon, "The Messaging Layer
              Security (MLS) Protocol", RFC 9420, DOI 10.17487/RFC9420,
              July 2023, <https://www.rfc-editor.org/rfc/rfc9420>.

Acknowledgments

   *TODO*: This

Authors' Addresses

   Travis Ralston
   The Matrix.org Foundation C.I.C.
   Email: travisr@matrix.org


   Matthew Hodgson
   The Matrix.org Foundation C.I.C.
   Email: matthew@matrix.org
